grafana:
  persistence:
    enabled: true
  grafana.ini:
    server:
      domain: grafana.{{ .Values.jxRequirements.ingress.domain | default "cluster.local" }}
      {{- if .Values.jxRequirements.ingress.tls.enabled }}
      root_url: "https://grafana.{{ .Values.jxRequirements.ingress.domain | default "cluster.local" }}"
      {{- else }}
      root_url: "http://grafana.{{ .Values.jxRequirements.ingress.domain | default "cluster.local" }}"
      {{- end }}
      serve_from_sub_path: true
    analytics:
      reporting_enabled: false
      check_for_updates: false
    auth.github:
      enabled: true
      allow_sign_up: true
      client_id: $__file{/etc/secrets/github_oauth_grafana/client_id}
      client_secret: $__file{/etc/secrets/github_oauth_grafana/client_secret}
      scopes: user:email,read:org
      auth_url: https://github.com/login/oauth/authorize
      token_url: https://github.com/login/oauth/access_token
      api_url: https://api.github.com/user
      team_ids:
      {{- range $key, $val := .Values.jxRequirements.environments }}
        {{- if hasKey $val "key" }}
          {{- if eq $val.key "dev" }}
      github-org: {{ $val.owner }}
          {{- end }}
        {{- end }}
      {{- end }}
  plugins:
    - grafana-piechart-panel 1.6.1
    - briangann-datatable-panel 1.0.3
  additionalDataSources:
    - name: Loki
      uid: loki
      type: loki
      access: proxy
      url: http://loki.monitoring:3100
      version: 1
      jsonData:
        derivedFields:
          - datasourceUid: tempo
            # matches variations of "traceID" fields, either in JSON or logfmt
            matcherRegex: (?:[Tt]race[-_]?[Ii][Dd])[\\]?["]?[=:][ ]?[\\]?["]?(\w+)
            name: TraceID
            # url will be interpreted as query for the datasource
            url: "$${__value.raw}"
    - name: Tempo
      uid: tempo
      type: tempo
      access: proxy
      url: http://tempo.monitoring:3100
      version: 1
      jsonData:
        tracesToLogs:
          datasourceUid: loki
  testFramework:
    enabled: false
  ingress:
    annotations:
      kubernetes.io/ingress.class: nginx
    enabled: true
    hosts:
      - grafana.{{ .Values.jxRequirements.ingress.domain | default "cluster.local" }}
    {{- if .Values.jxRequirements.ingress.tls.enabled }}
    tls:
      - hosts:
          - grafana.{{ .Values.jxRequirements.ingress.domain | default "cluster.local" }}
        {{- if hasKey .Values.jxRequirements.ingress.tls "secretName" }}
        secretName: "{{ .Values.jxRequirements.ingress.tls.secretName }}"
        {{- else if .Values.jxRequirements.ingress.tls.production }}
        secretName: "tls-{{ .Values.jxRequirements.ingress.domain | replace "." "-" }}-p"
        {{- else }}
        secretName: "tls-{{ .Values.jxRequirements.ingress.domain | replace "." "-" }}-s"
    {{- end }}
  {{- end }}
  sidecar:
    dashboards:
      searchNamespace: ALL
    datasources:
      enabled: true
      searchNamespace: ALL
    notifiers:
      enabled: true
      searchNamespace: ALL

alertmanager:
  ingress:
    enabled: false
    hosts: [ ]

prometheus:
  ingress:
    enabled: false
    hosts: [ ]

prometheusOperator:
  prometheusConfigReloader:
    resources:
      requests:
        cpu: 20m
        memory: 50Mi
      limits:
        cpu: 200m
        memory: 50Mi

kube-state-metrics:
  metricLabelsAllowlist:
    - "pods=[*]"
    - "deployments=[*]"
